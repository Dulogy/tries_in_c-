// tries_in_c++

#include<iostream>
using namespace std;
#include<cstring>
class trieNode{
    public:
    char data ;
    trieNode **children ;
    bool isTerminal ;
    trieNode(char data){
        this -> data = data ;
        children = new trieNode*[26] ;
        for(int i = 0; i < 26; i++){
            children[i] = NULL ;
        }
        isTerminal = false ;
    }
};
class trie{
    private :
    trieNode *root ;
    public:
    trie(){
    root = new trieNode('\0') ;
    }
    void insertWord(trieNode *root, string word){
        if(word.size() == 0){
            root -> isTerminal = true ;
            return ;
        }
        int index = word[0] -'a' ;
        trieNode*child ;
        if(root -> children[index] != NULL){
           child = root -> children[index] ; 
        }
        else{
            child = new trieNode(word[0]) ;
            root -> children[index] = child ;
        }
        insertWord(child,word.substr(1)) ;
    }
    void insertWord(string word){
        insertWord(root,word) ;
    }

    bool search(trieNode *root,string word){
        if(word.size() == 0){
            if(root -> isTerminal == true)
            return true;
            else
            return false ; 
        }
        int index = word[0] - 'a' ;
        trieNode *child ;
        if(root -> children[index] != NULL){
            child = root -> children[index] ;
        }
        else{
            return false ;
        }

        return search(child,word.substr(1));
    }
    bool search(string word){
       return search(root,word);
    }
    void removeWord(trieNode *root,string word){
        if(word.size() == 0){
            root -> isTerminal = false ;
            return ;
        }
        int index = word[0] - 'a' ;
        trieNode *child ;
        if(root -> children[index] != NULL){
            child = root -> children[index] ;
        }
        else{
            return ;
        }
        removeWord(child,word.substr(1)) ;
        if(child -> isTerminal == false){
            for(int i = 0; i < 26; i++){
                if(child -> children[i] != NULL )
                return ;
            }
            delete child ;
            root -> children[index] = NULL ;
        }
    }
    void removeWord(string word){
        removeWord(root,word) ;
    }
};
int main(){
trie t ;
t.insertWord("duke") ;
t.insertWord("dulogy")   ;
t.insertWord("neutron")  ;
cout << t.search("duke") << "\n";
t.removeWord("neutron")   ;
cout << t.search("neutron") << "\n";
}
